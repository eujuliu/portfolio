---
import ActionsBar, { type ActionsBarFilter } from '@/components/ui/actions-bar';
import TextTranslator from '@/components/ui/text-translator';
import BaseLayout from '@/layouts/base-layout.astro';
import { Circle, GitFork, Github, Star } from 'lucide-react';
import { Octokit } from 'octokit';
import Colors from '../../public/github-languages-colors.json';
import type { SelectOption } from '@/components/ui/select';
import formatString from '@/helpers/format-string';

interface Project {
	name: string;
	link: string;
	description: string | null;
	where: string;
	language?: string | null;
	stars: number;
	forks: number;
	tags?: string[];
	created_at?: string | null;
	updated_at?: string | null;
}

const filters: ActionsBarFilter[] = [
	{
		id: 'order',
		text: 'Order',
		values: [
			{ text: 'Oldest', value: 'oldest' },
			{ text: 'Newest', value: 'newest' },
		],
		multiple: false,
		itemText: 'text',
		initialValue: 'newest',
	},
	{
		id: 'tags',
		text: 'Tags',
		values: [],
		multiple: true,
	},
];

let projects: Project[] = [];

const octokit = new Octokit({
	auth: import.meta.env.OCTOKIT_AUTH_TOKEN,
});

await octokit
	.request('GET /users/{username}/repos', {
		username: 'eujuliu',
		headers: {
			'X-GitHub-Api-Version': '2022-11-28',
		},
		sort: 'created',
		direction: 'desc',
		per_page: 100,
	})
	.then((response) => {
		projects = response.data
			.filter((repo) => repo.topics?.includes('personal-project'))
			.reduce<Project[]>((repositories, repo) => {
				const obj: Project = {
					name: repo.name,
					link: repo.html_url,
					description: repo.description,
					where: 'Github',
					language: repo.language,
					tags: repo.topics,
					stars: repo.stargazers_count || 0,
					forks: repo.forks_count || 0,
					created_at: repo.created_at,
					updated_at: repo.updated_at,
				};

				return [...repositories, obj];
			}, []);

		filters[1].values = projects.reduce<SelectOption[]>((acc, repo) => {
			const tags = repo.tags || [];

			return [
				...acc,
				...tags.map((tag) => ({ text: formatString(tag), value: tag })),
			].filter(
				(item, index, self) =>
					self.findIndex((i) => i.value === item.value) === index &&
					!['personal-project'].includes(item.value)
			);
		}, []);
	});
---

<BaseLayout>
	<div slot="main">
		<ActionsBar filters={filters} client:only>
			<TextTranslator path="projects.title" client:only slot="title" />
		</ActionsBar>

		<div class="grid gap-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
			{
				projects.map(
					({ name, link, description, where, language, stars, forks }) => (
						<div class="grid gap-2 grid-rows-3 border border-neutral-200 dark:border-neutral-700 rounded-lg p-4 w-full">
							<div class="flex justify-between items-center font-bold">
								<a
									href={link}
									target="_blank"
									class="text-lg text-blue-500 hover:underline underline-offset-2"
								>
									{name}
								</a>
								<Github size={12} />
							</div>

							<p class="font-medium text-xs text-neutral-500 line-clamp-2">
								{description}
							</p>

							<div class="flex gap-4 items-center">
								{language ? (
									<span class="flex items-center gap-1 font-bold text-sm">
										<Circle
											fill={(Colors as any)[language]}
											stroke="none"
											size={15}
										/>
										{language}
									</span>
								) : (
									''
								)}

								{stars ? (
									<span class="flex items-center gap-1">
										<Star size={15} />
										<span class="text-xs font-medium">{stars}</span>
									</span>
								) : (
									''
								)}

								{forks ? (
									<span class="flex items-center gap-1">
										<GitFork size={15} />
										<span class="text-xs font-medium">{forks}</span>
									</span>
								) : (
									''
								)}
							</div>
						</div>
					)
				)
			}
		</div>
	</div>
</BaseLayout>
