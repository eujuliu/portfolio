---
import BaseLayout from "@/layouts/base-layout.astro";

import ActionsBar, { type ActionsBarFilter } from "@/components/ui/actions-bar";
import TextTranslator from "@/components/ui/text-translator";
import type { SelectOption } from "@/components/ui/select";
import List from "@/components/projects/list";

import { Octokit } from "octokit";

import formatString from "@/helpers/format-string";

export interface Project {
	name: string;
	link: string;
	description: string | null;
	where: string;
	language?: string | null;
	stars: number;
	forks: number;
	tags?: string[];
	created_at?: string | null;
	updated_at?: string | null;
}

const filters: ActionsBarFilter[] = [
	{
		id: "order",
		text: "filters.order",
		values: [
			{ text: "filters.oldest", value: "oldest" },
			{ text: "filters.newest", value: "newest" },
		],
		multiple: false,
		itemText: "text",
		initialValue: "newest",
	},
	{
		id: "tags",
		text: "filters.tags",
		values: [],
		multiple: true,
	},
];

let projects: Project[] = [];

const octokit = new Octokit({
	auth: import.meta.env.OCTOKIT_AUTH_TOKEN as string,
});

await octokit
	.request("GET /users/{username}/repos", {
		username: "eujuliu",
		headers: {
			"X-GitHub-Api-Version": "2022-11-28",
		},
		sort: "created",
		direction: "desc",
		per_page: 100,
	})
	.then((response) => {
		projects = response.data
			.filter((repo) => repo.topics?.includes("personal-project"))
			.reduce<Project[]>((repositories, repo) => {
				const obj: Project = {
					name: repo.name,
					link: repo.html_url,
					description: repo.description,
					where: "Github",
					language: repo.language,
					tags: repo.topics,
					stars: repo.stargazers_count || 0,
					forks: repo.forks_count || 0,
					created_at: repo.created_at,
					updated_at: repo.updated_at,
				};

				return [...repositories, obj];
			}, []);

		filters[1].values = projects.reduce<SelectOption[]>((acc, repo) => {
			const tags = repo.tags || [];

			return [
				...acc,
				...tags.map((tag) => ({ text: formatString(tag), value: tag })),
			].filter(
				(item, index, self) =>
					self.findIndex((i) => i.value === item.value) === index &&
					!["personal-project"].includes(item.value)
			);
		}, []);
	});
---

<BaseLayout>
	<div slot="main">
		<ActionsBar filters={filters} client:only="react">
			<TextTranslator path="projects.title" client:only="react" slot="title" />
		</ActionsBar>

		<List projects={projects} client:only="react" />
	</div>
</BaseLayout>
