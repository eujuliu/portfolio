const _astro_dataLayerContent = [["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.4","content-config-digest","e7ab4ea4ac2a502e","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{\"light\":\"min-light\",\"dark\":\"min-dark\"},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,115,116],"en/learnig-go-lang",{id:11,data:13,body:24,filePath:25,digest:26,rendered:27},{id:14,title:15,subtitle:16,unique_name:17,image:18,publishedAt:19,tags:20,language:23},"44ed902f-e285-494d-ae65-9bdcd94f59fa","Aprenda o básico de GoLang","Se você quer aprender golang esse é um bom tutorial para você.","learn-basic-of-golang","/public/images/learn-go-lang.jpeg","2025-01-16T23:34:39.375Z",[21,22],"golang","tutorial","en","Para executar o golang é necessário instalar o compilador [Go](https://go.dev/dl/), para verificar a instalação rode `go version` no terminal.\n\nDepois de instalado crie a pasta que vai ficar o seu projeto, e dentro da pasta execute esse comando `go mod init nome_do_modulo` com isso vai ser criado o seu go.mod que nele vai ter informações como o nome do modulo, a versão do go e as lib utilizadas no projeto.\n\n### Syntax\n\nA Syntax do go é bem simples, de cima para baixo vamos ter a declaração do package, os imports, as funções e por ultimo expressões e declarações como mostrado no código abaixo:\n\n```go\npackage main\nimport (\"fmt\")\n\nfunc main() {\n  fmt.Println(\"Hello World!\")\n}\n```\n\nEm go é necessário ter o package main e a função main, eles são os iniciadores de tudo.\n\n### Output\n\nPara exibir informações no terminal, basta usar algumas das funções de print do package `fmt`, exemplo: `Print`, `Println` ou `Printf`\n\nEm go para retornar o valor no terminal formatado bastar usar algo parecido com isso:\n\n```go\nimport \"fmt\"\n\nvar name = \"Julio\"\nvar age = 24\n\nfmt.Print(\"Name: \", name) // Saida: Name: Julio\nfmt.Println(\"Name: \", name, \"Age:\", age) // Adiciona uma quebra de linha no final\nfmt.Printf(\"Name: %v Age: %v\", name, age) // Formatado\n```\n\n#### Verbos para formatação geral\n\n| Verbo | Descrição                        |\n| ----- | -------------------------------- |\n| %v    | Valor na formatação padrão       |\n| %#v   | Valor na formatação do Go-syntax |\n| %T    | Retornar o tipo do valor         |\n| %%    | Retornar o sinal de %            |\n\n### Variables\n\nExistem duas formas para se declarar uma variável em go, com `var name datatype = value` ou inferindo o tipo com `name := value`.\n\n==Inferir o tipo significa que o datatype da variável vai ser definido a partir do valor==\n\nO datatype da variável pode ser `int` que são valores numéricos (123, -123, etc.), `float32` que são valores numéricos com ponto flutuante (123.02, -123.02, etc.), `string` que são cadeias de caracteres ou `bool` que é `true` ou `false`.\n\n#### Regras para nomes\n\n1. Começar com letra ou underscore somente\n2. Só pode conter alpha-numéricos (a-z, A-Z, 0-9 e \\_)\n3. Tem case-sensitive (age, Age e AGE são variáveis diferentes)\n4. Sem limite no tamanho do nome\n5. Não pode ser palavras chaves usadas pelo Go\n\n==Variáveis criadas dentro de funções só podem ser acessadas dentro da função==\n\n#### Constantes\n\nOutra forma de declarar uma variável é usar `const` para criar uma variável imutável e somente para leitura, seguem as mesmas regras do `var` mas geralmente seus nomes estão em maiúsculo, mas isso não é uma regra é somente para identificar elas.\n\n### Operadores\n\nEm go temos os mesmo operadores que outras linguagens de programação.\n\n#### Aritméticos\n\n| Operador | Exemplo | Resultado                   |\n| -------- | ------- | --------------------------- |\n| +        | x + y   | Soma de x com y             |\n| -        | x - y   | Subtrai um valor pelo outro |\n| \\*       | x \\* y  | Multiplica os dois valores  |\n| /        | x / y   | Faz a divisão de x por y    |\n| %        | x % y   | Resto da divisão de x por y |\n| ++       | x++     | Aumenta o valor em 1        |\n| --       | x--     | Diminui o valor em 1        |\n\n#### Operadores de Atribuição\n\n| Atribuição | Descrição                | Examplo    |\n| ---------- | ------------------------ | ---------- |\n| x = y      | Atribuir                 | x = y      |\n| x += y     | Adiciona e atribui       | x = x + y  |\n| x -= y     | Subtrai e atribui        | x = x - y  |\n| x \\*= y    | Multiplica e atribui     | x = x \\* y |\n| x /= y     | Divide e atribui         | x = x / y  |\n| x %= y     | Divide e atribui o resto | x = x % y  |\n\n#### Operadores de comparação\n\n| Operator | Name             | Example | Result                            |\n| -------- | ---------------- | ------- | --------------------------------- |\n| ==       | Igual            | x == y  | Verdade se x é igual a y          |\n| !=       | Não igual        | x != y  | Verdade se x não é igual a y      |\n| <        | Menor que        | x < y   | Verdade se x é menor que y        |\n| <=       | Menor ou igual a | x <= y  | Verdade se x é menor ou igual a y |\n| >        | Maior que        | x > y   | Verdade se x é maior que y        |\n| >=       | Maior ou igual a | x >= y  | Verdade se x é maior ou igual a y |\n\n#### Operadores Lógicos\n\n| Operator | Name       | Description                                           | Example            |\n| -------- | ---------- | ----------------------------------------------------- | ------------------ |\n| &&       | Logico E   | Retorna verdade se ambos são verdadeiros              | x < y && x > z     |\n| \\|       | Logico OU  | Retorna verdade se ao menos 1 seja verdadeiro         | x < y \\| x > z     |\n| !        | Logico Não | Inverte o resultado, se for falso torna-se verdadeiro | !(x == y && x > z) |\n\n### Condicionais\n\nEm go para se criar um condição que executara linhas de código caso seja verdade, você pode usar o `if` desta forma\n\n```go\nif (codição) {\n\t// executa se for verdade\n}\n```\n\nVocê também pode usar o `else` junto com `if` para caso queira executar linhas de código para quando a condição for falsa\n\n```go\nif (condição) {\n\t// executa se for verdade\n} else {\n\t// executa se for falsa\n}\n```\n\nCaso você adicionar outra condições, pode usar o `else if` e passado a nova condição\n\n```go\nif (condição1) {\n\t// executa se for verdade\n} else if (condição2) {\n\t// executa se for verdade\n} else {\n\t// executa se não for verdade\n}\n```\n\n#### Switch\n\nO switch é uma forma de selecionar entre múltiplas escolhas uma para ser executa, ele é parecido com o de outras linguagens, com a diferença que não precisa usar `break`.\n\n```go\nswitch expression {\ncase x:\n   // codigo\ncase y:\n\t// codigo\ncase z:\n...\ndefault:\n\t// codigo\n}\n```\n\nEle tem uma funcionalidade chamada multi-case, que permite usar o mesmo `case` para múltiplas expressões dessa forma:\n\n```go\nswitch expression {\ncase x,y:\n   // codigo\ncase v,w:\n\t// codigo\ncase z:\n...\ndefault:\n\t// codigo\n}\n```\n\n### Loops\n\nEm go a somente uma forma de fazer um loop e é com `for` desta forma:\n\n```go\nfor inicialização; validação; incrementação {\n\t// código\n}\n```\n\nÉ possível pular uma ou mais etapas do `for` usando `continue` e para parar o loop pode usar `break`.\n\nPara percorrer um array ou slice pode usar `range` desta forma:\n\n```go\nfor index, value := range array|slice|map {\n\t// codigo\n}\n```\n\nEla retorna o index e o valor.\n\n### Funções\n\nEm go as funções são declaradas com `func` da seguinte forma:\n\n```go\nfunc functionName(param1 datatype, param2 datatype, ...) datatype {\n\t// codigo\n}\n\nfunctionName() // chamada\n```\n\nExistem algumas regras para o nome da função:\n\n1. O nome da função tem que iniciar com uma letra\n2. Somente alpha-numéricos (a-z, A-Z, 0-9 e \\_)\n3. O nome tem case-sensitive\n4. Não pode conter espaços\n5. Não pode ser uma palavra reservada\n\nEm go é possível nomear oque vai ser retornado pela função e também é possível retornar mais de uma coisa, basta separa por virgula no `return`\n\n```go\nfunc functionName() (result1 datatype, ...) {\n\t// codigo\n\treturn result1, result2\n}\n```\n\nSe você quiser selecionar todos os parâmetros de uma função é possível usando `...`\n\n```go\nfunc example(s ...string) {\n\tfmt.Println(s[0])\n\tfmt.Println(s[3])\n}\n\n\nexample(\"banana\", \"apple\", \"pineapple\")\n```\n\nPara aceitar qualquer tipo de parâmetro, basta passar interface{} nos parâmetros\n\n```go\nfunc example(s ...interface{}) {\n\tfmt.Println(s[0])\n\tfmt.Println(s[3])\n}\n\n\nexample(\"banana\", true, 12)\n```\n\n#### Closure Functions\n\nClosure Functions são funções anonimas, elas permitem que você acesse variáveis que foram criados fora do corpo dela.\n\n```go\nfunc main() {\n\tl := 20\n\tb := 30\n\n\tfunc() {\n\t\tvar area int\n\t\tarea = l * b\n\t\tfmt.Println(area)\n\t}()\n}\n```\n\nTambém é possível usar em loops\n\n```go\nfunc main() {\n\tfor i := 10.0; i < 100; i += 10.0 {\n\t\trad := func() float64 {\n\t\t\treturn i * 39.370\n\t\t}()\n\n\t\tfmt.Printf(\"%.2f Metros de %.2f Pelagadas\\n\", i, rad)\n\t}\n}\n```\n\n#### Defer\n\nGo tem uma declaração especial chamada defer que agenda uma chamada de função para ser executada após a conclusão da função.\n\n```go\nfunc first() {\n\tfmt.Println(\"first\")\n}\n\nfunc second() {\n\tfmt.Println(\"second\")\n}\n\nfunc main() {\n\tdefer second()\n\tfirst()\n}\n```\n\nNesse caso a função `first` vai ser executada e depois a função `second`.\n\n#### Panic e Recover\n\nEm go tem uma função chamada `panic` que tem como objetivo interromper a execução e retornar um erro.\n\n```go\nfunc main() {\n\tconfigData, err := os.ReadFile(\"config.json\")\n\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Error reading configuration file: %v\", err))\n\t}\n\t...\n}\n```\n\nCaso `err` seja diferente de `nil` a execução do programa sera interrompida e uma mensagem sera exibida no terminal.\n\nMas caso você queira fazer alguma ação antes do programa ser interrompido, você pode usar a função `recover` junto com `defer` para fazer uma ultima ação.\n\n```go\nfunc main() {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\t// Tentar restabelecer o fluxo de execução da função\n\t\t}\n\t}\n\t...\n}\n```\n\nDesta forma quando um `panic` for chamado, e as funções de defer forem chamadas você pode tentar restabelecer o programa ou encerrar tudo para evitar um crash.\n\n### Arrays\n\nEm go os arrays são agrupamentos de valores do mesmo tipo em uma unica variável, para criar um usasse `var array_name = [length]datatype{values}`.\n\nOs arrays tem tamanho fixo, se for criado um com 5 espaços não sera possível adicionar mais que 5 valores nele.\n\nTambém é possível criar arrays com somente alguns espaços preenchidos, com `array_name = [5]int{1:2, 3:4}` desta forma teremos a seguinte saída `[0 2 0 4 0]`\n\nCase seja necessário alterar um valor, você pode usar `array_name[1] = 1` desta forma o valor que esta no index 1 vai ser igual a 1 a partir de agora.\n\n### Slices\n\nDiferente dos arrays os slices são mais flexíveis e poderosos, permitindo que você adicione mais valores depois de criados, para se criar um slice usasse a mesma syntax do array, mas não é necessário passar o tamanho `var slice_name = []datatype{values}` você também pode criar um slice usando os valores de um array com `var slice_name := array_name[start:end]` outra possibilidade é criar eles usando a função `make` desta forma `slice_name := make([]datatype, length, capacity)`\n\nPara modificar um valor basta informar o index e o valor assim `slice_name[1] = 1`.\n\nPara adicionar no final use `slice_name = append(slice_name, elem1, elem2, ...)`, também pode ser usado para juntar duas slices com `slice3 = append(slice1, slice2...)` e necessário colocar os três pontos depois da segunda slice.\n\n### Maps\n\nPara salvar pares de chave e valor, você pode usar o `map` das seguintes forma:\n\n```go\nvar map_name = map[keyDataType]ValueDataType{key1: value1, key2: value2, ...}\n// ou\nvar map_name = make(map[keyDataType]ValueDataType)\n```\n\nDiferente de um `struct` o `map` permite usar diferentes tipos para a chave com booleanos, números, caracteres, arrays, pointers, structs ou interfaces, somente slices, maps e funções não são permitidos. Para valores é permitido qualquer tipo.\n\nPara acessar um valor basta acessar usando a chave `map_name[key]`, a mesma forma é usada para atualizar o valor, basta atribuir o novo valor.\n\nPara deletar uma valor é necessário usar a função `delete(map_name, key)`.\n\nÉ possível também verificar se um elemento existem usando `val, ok := map_name[key]` o `ok` vai retornar um boolean.\n\nSe for copiar um `map` saiba que ele vai ter referência, então se você criar uma variável `mapY` que recebe `mapX` como valor, todos as alterações em `mapY` vão refletir em `mapX`.\n\nExemplo:\n\n```go\nvar mapX := map[string]String{\"brand\": \"Ford\", \"model\": \"Mustang\"}\nvar mapY := mapX\n\nfmt.Println(mapX) // saida: map[brand:Ford model:Mustang]\nfmt.Println(mapY) // saida: map[brand:Ford model:Mustang]\n\nb[\"model\"] = \"Maverick\"\n\nfmt.Println(a) // saida: map[brand:Ford model:Maverick]\nfmt.Println(b) // saida: map[brand:Ford model:Maverick]\n```\n\nAlém disso, é possível percorrer um `map` com um `for` basta usar `range` e ele vai retornar a chave e o valor.\n\n```go\n\nvar mapX := map[string]String{\"brand\": \"Ford\", \"model\": \"Mustang\"}\n\nfor k,v := range mapX {\n\tfmt.Println(k, v)\n}\n```\n\n### Struct\n\nEm go existe uma forma de criar uma coleção de membros de diferentes tipos em uma variável.\n\n```go\ntype struct_name struct {\n\tmembem1 datatype;\n\tmember2 datatype;\n\t...\n}\n```\n\nPara atribuir uma struct a uma variável basta usar:\n\n```go\ntype User struct {\n\tname string;\n\tage int;\n}\n\nvar user = User{\"Julio\", 24}\n\n// ou\n\nvar user User\n\nuser.name = \"Julio\"\nuser.age = 24\n```\n\n### Interfaces\n\nEm go as interfaces são um tipo abstrato, servem para descrever os métodos de um conjunto de métodos.\n\nPor exemplo, vamos considerar que temos uma `struct` User com as seguintes propriedades: `FirstName`, `LastName`, `Age`, `Role` e vamos criar uma interface `UserMethods` para especificar os métodos que a estrutura `User` vai ter e vamos criar um função `handleAdminUser` que vai receber a estrutura `User` como parâmetro.\n\n```go\ntype User struct {\n\tFirstName string\n\tLastName  string\n\tAge       int\n\tRole      string\n}\n\nfunc (u User) GetFullName() string {\n\treturn fmt.Sprintf(\"%v %v\", u.FirstName, u.LastName)\n}\n\nfunc (u User) GetRole() string {\n\treturn u.Role\n}\n\ntype UserMethods interface {\n\tGetFullName() string\n\tGetRole() string\n}\n\nfunc handleAdminUser(u UserMethods) {\n\tif u.GetRole() == \"admin\" {\n\t\t// Codigo\n\t}\n\n\t// Codigo\n}\n\nfunc main() {\n\tvar user User = User{\"Julio\", \"Martins\", 24, \"admin\"}\n\n\thandleAdminUser(user)\n}\n\n```\n\nDesta forma se você tentar passar um valor para `handleAdminUser` que não contenha os métodos que estão presentes em `UserMethods` será disparado um erro.\n\n### Goroutines\n\nUma goroutine é uma thread leve de execução. As goroutines permitem a execução de funções simultaneamente em um programa e são projetadas para serem eficientes e escaláveis.\n\nGoroutines podem ser criadas usando a palavra-chave `go` seguida pela chamada da função.\n\n```go\nfunc fetch(url string) {\n\tresponse, err := http.Get(url)\n\tfmt.Println(\"GET \", url)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tdefer response.Body.Close()\n\n\tbody, err := io.ReadAll(response.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(len(body))\n}\n\nfunc main() {\n\tgo fetch(\"https://www.google.com\")\n\tgo fetch(\"https://www.stackoverflow.com\")\n\n\ttime.Sleep(10 * time.Second)\n}\n```\n\nCaso você queira esperar até que os goroutines terminem para que o programa finalize, você pode usar o `WaitGroup` do package `sync` e nele existem 3 métodos, um para adicionar `Add` um para concluir a espera de 1 goroutine `Done` e outro para esperar os goroutines `Wait`,\n\n```go\nvar wg sync.WaitGroup\n\nfunc fetch(url string) {\n\tdefer wg.Done()\n\n\tresponse, err := http.Get(url)\n\tfmt.Println(\"GET \", url)\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tdefer response.Body.Close()\n\n\tbody, err := io.ReadAll(response.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(len(body))\n}\n\nfunc main() {\n\twg.Add(2)\n\tgo fetch(\"https://www.google.com\")\n\tgo fetch(\"https://www.stackoverflow.com\")\n\n\twg.Wait()\n}\n```\n\n### Channels\n\nOs canais são um tipo de dado utilizado para se comunicar e sincronizar entre goroutines. Para criar um channel é necessário usar a função `make` e eles podem ser com buffer e sem buffer.\n\nCanais sem buffer bloqueiam a goroutine de envio até que haja um receptor correspondente pronto para receber o valor que está sendo enviado.\n\nCanais com buffer, por outro lado, podem conter um número limitado de valores (determinado pelo tamanho do buffer) e só bloquearão a goroutine de envio quando o buffer estiver cheio.\n\nPara criar um canal sem buffer utiliza-se o seguinte comando:\n\n```go\nch := make(chan datatype)\n\nch <- value // Enviar um valor para o canal\nx := <- ch // Receber um valor do canal e atribuir a x\n```\n\nPara criar um canal com buffer basta passar um segundo valor para a função `make` esse segundo parâmetro é a capacidade que esse canal pode ter.\n\n```go\nch := make(chan datatype, 3)\n\nch <- 1\nch <- 2\nch <- 3\n```\n\nCom esses envios o canal agora esta cheio, para adicionar mais items sera necessário receber os valores com `:= <- ch`.\n\nOutra coisa importante é o fechamento do canal com a função `close` passando o canal como parâmetro, isso é necessário para evitar que a goroutine principal bloqueie indefinidamente no canal, mas é necessário fechar corretamente para evitar erros e para isso é necessário seguir algumas regras:\n\n1. Somente o transmissor deveria fechar o canal\n2. É possível usar o range loop para receber valores, porque o loop vai terminar automaticamente quando o canal fechar.\n3. Verifique se o canal esta aberto antes de enviar um valor com `x, ok := <-ch` a variável `ok` vai dizer se o canal esta aberto.\n4. Usar `select` para receber valores de múltiplos canais.\n\nExemplo de uso de `select` e `for` em canais:\n\n```go\nfor {\n\tselect {\n\t\tcase n := channel1:\n\t\t\t// Exemplo para caso você queira usar o valor do channel\n\t\tcase <-channel2:\n\t\t\t// Exemplo usando o channel se salvar o valor\n\t\tcase n, ok := channel3\n\t\t\t// Exemplo para fazer condições\n\t}\n}\n```\n\nCaso tenha somente um canal, você pode usar um `for` com `range` para receber os valores\n\n```go\nfor n := range channel {\n\t// Código\n}\n```\n\nVocê pode usar um canal como parâmetro da seguinte forma\n\n```go\nfunc sendData(ch chan<- int) {\n\t// Código\n}\n```\n\n### Conclusão\n\nAgora você já tem o essencial para fazer seus apps com golang mas ainda não terminou as coisas para se aprender sobre golang, existe algumas libs padrão da linguagem, como por exemplo `log` para logging, `os` que é uma lib para lidar com o sistema operacional, com ela é possível criar/ler/mover/copiar/deletar arquivos/diretórios entre outras libs que existem.","src/data/blog/en/learnig-go-lang.md","d6ebbaa8d2c339cd",{html:28,metadata:29},"<p>Para executar o golang é necessário instalar o compilador <a href=\"https://go.dev/dl/\">Go</a>, para verificar a instalação rode <code>go version</code> no terminal.</p>\n<p>Depois de instalado crie a pasta que vai ficar o seu projeto, e dentro da pasta execute esse comando <code>go mod init nome_do_modulo</code> com isso vai ser criado o seu go.mod que nele vai ter informações como o nome do modulo, a versão do go e as lib utilizadas no projeto.</p>\n<h3 id=\"syntax\">Syntax</h3>\n<p>A Syntax do go é bem simples, de cima para baixo vamos ter a declaração do package, os imports, as funções e por ultimo expressões e declarações como mostrado no código abaixo:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">package</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">import</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"fmt\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Hello World!\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Em go é necessário ter o package main e a função main, eles são os iniciadores de tudo.</p>\n<h3 id=\"output\">Output</h3>\n<p>Para exibir informações no terminal, basta usar algumas das funções de print do package <code>fmt</code>, exemplo: <code>Print</code>, <code>Println</code> ou <code>Printf</code></p>\n<p>Em go para retornar o valor no terminal formatado bastar usar algo parecido com isso:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">import</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"fmt\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> name </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"Julio\"</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> age </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 24</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Print</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Name: \"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, name) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Saida: Name: Julio</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Name: \"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, name, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Age:\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, age) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Adiciona uma quebra de linha no final</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Printf</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Name: </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%v</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> Age: </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%v</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, name, age) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Formatado</span></span></code></pre>\n<h4 id=\"verbos-para-formatação-geral\">Verbos para formatação geral</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Verbo</th><th>Descrição</th></tr></thead><tbody><tr><td>%v</td><td>Valor na formatação padrão</td></tr><tr><td>%#v</td><td>Valor na formatação do Go-syntax</td></tr><tr><td>%T</td><td>Retornar o tipo do valor</td></tr><tr><td>%%</td><td>Retornar o sinal de %</td></tr></tbody></table>\n<h3 id=\"variables\">Variables</h3>\n<p>Existem duas formas para se declarar uma variável em go, com <code>var name datatype = value</code> ou inferindo o tipo com <code>name := value</code>.</p>\n<p><mark class=\"flexible-marker flexible-marker-default\">Inferir o tipo significa que o datatype da variável vai ser definido a partir do valor</mark></p>\n<p>O datatype da variável pode ser <code>int</code> que são valores numéricos (123, -123, etc.), <code>float32</code> que são valores numéricos com ponto flutuante (123.02, -123.02, etc.), <code>string</code> que são cadeias de caracteres ou <code>bool</code> que é <code>true</code> ou <code>false</code>.</p>\n<h4 id=\"regras-para-nomes\">Regras para nomes</h4>\n<ol>\n<li>Começar com letra ou underscore somente</li>\n<li>Só pode conter alpha-numéricos (a-z, A-Z, 0-9 e _)</li>\n<li>Tem case-sensitive (age, Age e AGE são variáveis diferentes)</li>\n<li>Sem limite no tamanho do nome</li>\n<li>Não pode ser palavras chaves usadas pelo Go</li>\n</ol>\n<p><mark class=\"flexible-marker flexible-marker-default\">Variáveis criadas dentro de funções só podem ser acessadas dentro da função</mark></p>\n<h4 id=\"constantes\">Constantes</h4>\n<p>Outra forma de declarar uma variável é usar <code>const</code> para criar uma variável imutável e somente para leitura, seguem as mesmas regras do <code>var</code> mas geralmente seus nomes estão em maiúsculo, mas isso não é uma regra é somente para identificar elas.</p>\n<h3 id=\"operadores\">Operadores</h3>\n<p>Em go temos os mesmo operadores que outras linguagens de programação.</p>\n<h4 id=\"aritméticos\">Aritméticos</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operador</th><th>Exemplo</th><th>Resultado</th></tr></thead><tbody><tr><td>+</td><td>x + y</td><td>Soma de x com y</td></tr><tr><td>-</td><td>x - y</td><td>Subtrai um valor pelo outro</td></tr><tr><td>*</td><td>x * y</td><td>Multiplica os dois valores</td></tr><tr><td>/</td><td>x / y</td><td>Faz a divisão de x por y</td></tr><tr><td>%</td><td>x % y</td><td>Resto da divisão de x por y</td></tr><tr><td>++</td><td>x++</td><td>Aumenta o valor em 1</td></tr><tr><td>—</td><td>x—</td><td>Diminui o valor em 1</td></tr></tbody></table>\n<h4 id=\"operadores-de-atribuição\">Operadores de Atribuição</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Atribuição</th><th>Descrição</th><th>Examplo</th></tr></thead><tbody><tr><td>x = y</td><td>Atribuir</td><td>x = y</td></tr><tr><td>x += y</td><td>Adiciona e atribui</td><td>x = x + y</td></tr><tr><td>x -= y</td><td>Subtrai e atribui</td><td>x = x - y</td></tr><tr><td>x *= y</td><td>Multiplica e atribui</td><td>x = x * y</td></tr><tr><td>x /= y</td><td>Divide e atribui</td><td>x = x / y</td></tr><tr><td>x %= y</td><td>Divide e atribui o resto</td><td>x = x % y</td></tr></tbody></table>\n<h4 id=\"operadores-de-comparação\">Operadores de comparação</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Name</th><th>Example</th><th>Result</th></tr></thead><tbody><tr><td>==</td><td>Igual</td><td>x == y</td><td>Verdade se x é igual a y</td></tr><tr><td>!=</td><td>Não igual</td><td>x != y</td><td>Verdade se x não é igual a y</td></tr><tr><td>&#x3C;</td><td>Menor que</td><td>x &#x3C; y</td><td>Verdade se x é menor que y</td></tr><tr><td>&#x3C;=</td><td>Menor ou igual a</td><td>x &#x3C;= y</td><td>Verdade se x é menor ou igual a y</td></tr><tr><td>></td><td>Maior que</td><td>x > y</td><td>Verdade se x é maior que y</td></tr><tr><td>>=</td><td>Maior ou igual a</td><td>x >= y</td><td>Verdade se x é maior ou igual a y</td></tr></tbody></table>\n<h4 id=\"operadores-lógicos\">Operadores Lógicos</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Name</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>&#x26;&#x26;</td><td>Logico E</td><td>Retorna verdade se ambos são verdadeiros</td><td>x &#x3C; y &#x26;&#x26; x > z</td></tr><tr><td>|</td><td>Logico OU</td><td>Retorna verdade se ao menos 1 seja verdadeiro</td><td>x &#x3C; y | x > z</td></tr><tr><td>!</td><td>Logico Não</td><td>Inverte o resultado, se for falso torna-se verdadeiro</td><td>!(x == y &#x26;&#x26; x > z)</td></tr></tbody></table>\n<h3 id=\"condicionais\">Condicionais</h3>\n<p>Em go para se criar um condição que executara linhas de código caso seja verdade, você pode usar o <code>if</code> desta forma</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (codição) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Você também pode usar o <code>else</code> junto com <code>if</code> para caso queira executar linhas de código para quando a condição for falsa</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (condição) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">} </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">else</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for falsa</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Caso você adicionar outra condições, pode usar o <code>else if</code> e passado a nova condição</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (condição1) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">} </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">else</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (condição2) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">} </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">else</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se não for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h4 id=\"switch\">Switch</h4>\n<p>O switch é uma forma de selecionar entre múltiplas escolhas uma para ser executa, ele é parecido com o de outras linguagens, com a diferença que não precisa usar <code>break</code>.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">switch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> expression {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> x:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">   // codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> y:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> z:</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">default</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Ele tem uma funcionalidade chamada multi-case, que permite usar o mesmo <code>case</code> para múltiplas expressões dessa forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">switch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> expression {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> x,y:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">   // codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> v,w:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> z:</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">default</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h3 id=\"loops\">Loops</h3>\n<p>Em go a somente uma forma de fazer um loop e é com <code>for</code> desta forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> inicialização; validação; incrementação {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// código</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>É possível pular uma ou mais etapas do <code>for</code> usando <code>continue</code> e para parar o loop pode usar <code>break</code>.</p>\n<p>Para percorrer um array ou slice pode usar <code>range</code> desta forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> index, value </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> range</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> array</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">|</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">slice</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">|map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Ela retorna o index e o valor.</p>\n<h3 id=\"funções\">Funções</h3>\n<p>Em go as funções são declaradas com <code>func</code> da seguinte forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> functionName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(param1 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, param2 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">functionName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// chamada</span></span></code></pre>\n<p>Existem algumas regras para o nome da função:</p>\n<ol>\n<li>O nome da função tem que iniciar com uma letra</li>\n<li>Somente alpha-numéricos (a-z, A-Z, 0-9 e _)</li>\n<li>O nome tem case-sensitive</li>\n<li>Não pode conter espaços</li>\n<li>Não pode ser uma palavra reservada</li>\n</ol>\n<p>Em go é possível nomear oque vai ser retornado pela função e também é possível retornar mais de uma coisa, basta separa por virgula no <code>return</code></p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> functionName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() (result1 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> result1, result2</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Se você quiser selecionar todos os parâmetros de uma função é possível usando <code>...</code></p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> example</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s[</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s[</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">3</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">example</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"banana\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"apple\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"pineapple\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span></code></pre>\n<p>Para aceitar qualquer tipo de parâmetro, basta passar interface{} nos parâmetros</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> example</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...interface</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{}) {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s[</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s[</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">3</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">example</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"banana\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">true</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">12</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span></code></pre>\n<h4 id=\"closure-functions\">Closure Functions</h4>\n<p>Closure Functions são funções anonimas, elas permitem que você acesse variáveis que foram criados fora do corpo dela.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tl </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 20</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tb </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 30</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tfunc</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tvar</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> area </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tarea </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> l </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">*</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> b</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(area)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}()</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Também é possível usar em loops</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> i </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 10.0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">; i </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 100</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">; i </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">+=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 10.0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\trad </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> func</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">float64</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\t\treturn</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> i </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">*</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 39.370</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\t}()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Printf</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%.2f</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> Metros de </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%.2f</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> Pelagadas\\n\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, i, rad)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h4 id=\"defer\">Defer</h4>\n<p>Go tem uma declaração especial chamada defer que agenda uma chamada de função para ser executada após a conclusão da função.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> first</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"first\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> second</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"second\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> second</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tfirst</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Nesse caso a função <code>first</code> vai ser executada e depois a função <code>second</code>.</p>\n<h4 id=\"panic-e-recover\">Panic e Recover</h4>\n<p>Em go tem uma função chamada <code>panic</code> que tem como objetivo interromper a execução e retornar um erro.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tconfigData, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ReadFile</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"config.json\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\t\tpanic</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Sprintf</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Error reading configuration file: </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%v</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, err))</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t...</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Caso <code>err</code> seja diferente de <code>nil</code> a execução do programa sera interrompida e uma mensagem sera exibida no terminal.</p>\n<p>Mas caso você queira fazer alguma ação antes do programa ser interrompido, você pode usar a função <code>recover</code> junto com <code>defer</code> para fazer uma ultima ação.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> func</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> r </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> recover</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(); r </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t\t// Tentar restabelecer o fluxo de execução da função</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t...</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Desta forma quando um <code>panic</code> for chamado, e as funções de defer forem chamadas você pode tentar restabelecer o programa ou encerrar tudo para evitar um crash.</p>\n<h3 id=\"arrays\">Arrays</h3>\n<p>Em go os arrays são agrupamentos de valores do mesmo tipo em uma unica variável, para criar um usasse <code>var array_name = [length]datatype{values}</code>.</p>\n<p>Os arrays tem tamanho fixo, se for criado um com 5 espaços não sera possível adicionar mais que 5 valores nele.</p>\n<p>Também é possível criar arrays com somente alguns espaços preenchidos, com <code>array_name = [5]int{1:2, 3:4}</code> desta forma teremos a seguinte saída <code>[0 2 0 4 0]</code></p>\n<p>Case seja necessário alterar um valor, você pode usar <code>array_name[1] = 1</code> desta forma o valor que esta no index 1 vai ser igual a 1 a partir de agora.</p>\n<h3 id=\"slices\">Slices</h3>\n<p>Diferente dos arrays os slices são mais flexíveis e poderosos, permitindo que você adicione mais valores depois de criados, para se criar um slice usasse a mesma syntax do array, mas não é necessário passar o tamanho <code>var slice_name = []datatype{values}</code> você também pode criar um slice usando os valores de um array com <code>var slice_name := array_name[start:end]</code> outra possibilidade é criar eles usando a função <code>make</code> desta forma <code>slice_name := make([]datatype, length, capacity)</code></p>\n<p>Para modificar um valor basta informar o index e o valor assim <code>slice_name[1] = 1</code>.</p>\n<p>Para adicionar no final use <code>slice_name = append(slice_name, elem1, elem2, ...)</code>, também pode ser usado para juntar duas slices com <code>slice3 = append(slice1, slice2...)</code> e necessário colocar os três pontos depois da segunda slice.</p>\n<h3 id=\"maps\">Maps</h3>\n<p>Para salvar pares de chave e valor, você pode usar o <code>map</code> das seguintes forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> map_name </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">keyDataType</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ValueDataType</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{key1: value1, key2: value2, </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// ou</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> map_name </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">keyDataType</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ValueDataType</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span></code></pre>\n<p>Diferente de um <code>struct</code> o <code>map</code> permite usar diferentes tipos para a chave com booleanos, números, caracteres, arrays, pointers, structs ou interfaces, somente slices, maps e funções não são permitidos. Para valores é permitido qualquer tipo.</p>\n<p>Para acessar um valor basta acessar usando a chave <code>map_name[key]</code>, a mesma forma é usada para atualizar o valor, basta atribuir o novo valor.</p>\n<p>Para deletar uma valor é necessário usar a função <code>delete(map_name, key)</code>.</p>\n<p>É possível também verificar se um elemento existem usando <code>val, ok := map_name[key]</code> o <code>ok</code> vai retornar um boolean.</p>\n<p>Se for copiar um <code>map</code> saiba que ele vai ter referência, então se você criar uma variável <code>mapY</code> que recebe <code>mapX</code> como valor, todos as alterações em <code>mapY</code> vão refletir em <code>mapX</code>.</p>\n<p>Exemplo:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapX </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">String</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"brand\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">: </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Ford\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"model\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">: </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Mustang\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapY </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapX</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(mapX) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// saida: map[brand:Ford model:Mustang]</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(mapY) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// saida: map[brand:Ford model:Mustang]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">b[</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"model\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">] </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"Maverick\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(a) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// saida: map[brand:Ford model:Maverick]</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(b) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// saida: map[brand:Ford model:Maverick]</span></span></code></pre>\n<p>Além disso, é possível percorrer um <code>map</code> com um <code>for</code> basta usar <code>range</code> e ele vai retornar a chave e o valor.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapX </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">String</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"brand\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">: </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Ford\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"model\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">: </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Mustang\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> k,v </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> range</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapX {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(k, v)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h3 id=\"struct\">Struct</h3>\n<p>Em go existe uma forma de criar uma coleção de membros de diferentes tipos em uma variável.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">type</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> struct_name</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> struct</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tmembem1 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tmember2 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t...</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Para atribuir uma struct a uma variável basta usar:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">type</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> User</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> struct</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tname </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tage </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">int</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> user </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> User</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Julio\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">24</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// ou</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> user </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">User</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">user.name </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"Julio\"</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">user.age </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 24</span></span></code></pre>\n<h3 id=\"interfaces\">Interfaces</h3>\n<p>Em go as interfaces são um tipo abstrato, servem para descrever os métodos de um conjunto de métodos.</p>\n<p>Por exemplo, vamos considerar que temos uma <code>struct</code> User com as seguintes propriedades: <code>FirstName</code>, <code>LastName</code>, <code>Age</code>, <code>Role</code> e vamos criar uma interface <code>UserMethods</code> para especificar os métodos que a estrutura <code>User</code> vai ter e vamos criar um função <code>handleAdminUser</code> que vai receber a estrutura <code>User</code> como parâmetro.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">type</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> User</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> struct</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tFirstName </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tLastName  </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tAge       </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tRole      </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (u </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">User</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">GetFullName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Sprintf</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%v</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> %v</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, u.FirstName, u.LastName)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (u </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">User</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">GetRole</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> u.Role</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">type</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UserMethods</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> interface</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tGetFullName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tGetRole</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleAdminUser</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(u </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">UserMethods</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> u.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">GetRole</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">==</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"admin\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t// Codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// Codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tvar</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> user </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">User</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> User</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Julio\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Martins\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">24</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"admin\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\thandleAdminUser</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(user)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Desta forma se você tentar passar um valor para <code>handleAdminUser</code> que não contenha os métodos que estão presentes em <code>UserMethods</code> será disparado um erro.</p>\n<h3 id=\"goroutines\">Goroutines</h3>\n<p>Uma goroutine é uma thread leve de execução. As goroutines permitem a execução de funções simultaneamente em um programa e são projetadas para serem eficientes e escaláveis.</p>\n<p>Goroutines podem ser criadas usando a palavra-chave <code>go</code> seguida pela chamada da função.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(url </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tresponse, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> http.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Get</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(url)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"GET \"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, url)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Fatal</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> response.Body.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Close</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tbody, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> io.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ReadAll</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(response.Body)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Fatal</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">len</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(body))</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tgo</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"https://www.google.com\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tgo</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"https://www.stackoverflow.com\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\ttime.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Sleep</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">10</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Caso você queira esperar até que os goroutines terminem para que o programa finalize, você pode usar o <code>WaitGroup</code> do package <code>sync</code> e nele existem 3 métodos, um para adicionar <code>Add</code> um para concluir a espera de 1 goroutine <code>Done</code> e outro para esperar os goroutines <code>Wait</code>,</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> wg </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">WaitGroup</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(url </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> wg.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Done</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tresponse, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> http.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Get</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(url)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"GET \"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, url)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Fatal</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> response.Body.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Close</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tbody, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> io.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ReadAll</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(response.Body)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Fatal</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">len</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(body))</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\twg.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Add</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">2</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tgo</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"https://www.google.com\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tgo</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"https://www.stackoverflow.com\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\twg.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Wait</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h3 id=\"channels\">Channels</h3>\n<p>Os canais são um tipo de dado utilizado para se comunicar e sincronizar entre goroutines. Para criar um channel é necessário usar a função <code>make</code> e eles podem ser com buffer e sem buffer.</p>\n<p>Canais sem buffer bloqueiam a goroutine de envio até que haja um receptor correspondente pronto para receber o valor que está sendo enviado.</p>\n<p>Canais com buffer, por outro lado, podem conter um número limitado de valores (determinado pelo tamanho do buffer) e só bloquearão a goroutine de envio quando o buffer estiver cheio.</p>\n<p>Para criar um canal sem buffer utiliza-se o seguinte comando:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;-</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> value </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Enviar um valor para o canal</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">x </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> &#x3C;-</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> ch </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Receber um valor do canal e atribuir a x</span></span></code></pre>\n<p>Para criar um canal com buffer basta passar um segundo valor para a função <code>make</code> esse segundo parâmetro é a capacidade que esse canal pode ter.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">3</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;-</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;-</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;-</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 3</span></span></code></pre>\n<p>Com esses envios o canal agora esta cheio, para adicionar mais items sera necessário receber os valores com <code>:= &#x3C;- ch</code>.</p>\n<p>Outra coisa importante é o fechamento do canal com a função <code>close</code> passando o canal como parâmetro, isso é necessário para evitar que a goroutine principal bloqueie indefinidamente no canal, mas é necessário fechar corretamente para evitar erros e para isso é necessário seguir algumas regras:</p>\n<ol>\n<li>Somente o transmissor deveria fechar o canal</li>\n<li>É possível usar o range loop para receber valores, porque o loop vai terminar automaticamente quando o canal fechar.</li>\n<li>Verifique se o canal esta aberto antes de enviar um valor com <code>x, ok := &#x3C;-ch</code> a variável <code>ok</code> vai dizer se o canal esta aberto.</li>\n<li>Usar <code>select</code> para receber valores de múltiplos canais.</li>\n</ol>\n<p>Exemplo de uso de <code>select</code> e <code>for</code> em canais:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tselect</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tcase</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> n </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> channel1:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t\t// Exemplo para caso você queira usar o valor do channel</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tcase</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> &#x3C;-</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">channel2:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t\t// Exemplo usando o channel se salvar o valor</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tcase</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> n, ok </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> channel3</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t\t// Exemplo para fazer condições</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Caso tenha somente um canal, você pode usar um <code>for</code> com <code>range</code> para receber os valores</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> n </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> range</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> channel {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// Código</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Você pode usar um canal como parâmetro da seguinte forma</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> sendData</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">chan&#x3C;-</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> int</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// Código</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h3 id=\"conclusão\">Conclusão</h3>\n<p>Agora você já tem o essencial para fazer seus apps com golang mas ainda não terminou as coisas para se aprender sobre golang, existe algumas libs padrão da linguagem, como por exemplo <code>log</code> para logging, <code>os</code> que é uma lib para lidar com o sistema operacional, com ela é possível criar/ler/mover/copiar/deletar arquivos/diretórios entre outras libs que existem.</p>",{headings:30,imagePaths:111,frontmatter:112},[31,35,38,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108],{depth:32,slug:33,text:34},3,"syntax","Syntax",{depth:32,slug:36,text:37},"output","Output",{depth:39,slug:40,text:41},4,"verbos-para-formatação-geral","Verbos para formatação geral",{depth:32,slug:43,text:44},"variables","Variables",{depth:39,slug:46,text:47},"regras-para-nomes","Regras para nomes",{depth:39,slug:49,text:50},"constantes","Constantes",{depth:32,slug:52,text:53},"operadores","Operadores",{depth:39,slug:55,text:56},"aritméticos","Aritméticos",{depth:39,slug:58,text:59},"operadores-de-atribuição","Operadores de Atribuição",{depth:39,slug:61,text:62},"operadores-de-comparação","Operadores de comparação",{depth:39,slug:64,text:65},"operadores-lógicos","Operadores Lógicos",{depth:32,slug:67,text:68},"condicionais","Condicionais",{depth:39,slug:70,text:71},"switch","Switch",{depth:32,slug:73,text:74},"loops","Loops",{depth:32,slug:76,text:77},"funções","Funções",{depth:39,slug:79,text:80},"closure-functions","Closure Functions",{depth:39,slug:82,text:83},"defer","Defer",{depth:39,slug:85,text:86},"panic-e-recover","Panic e Recover",{depth:32,slug:88,text:89},"arrays","Arrays",{depth:32,slug:91,text:92},"slices","Slices",{depth:32,slug:94,text:95},"maps","Maps",{depth:32,slug:97,text:98},"struct","Struct",{depth:32,slug:100,text:101},"interfaces","Interfaces",{depth:32,slug:103,text:104},"goroutines","Goroutines",{depth:32,slug:106,text:107},"channels","Channels",{depth:32,slug:109,text:110},"conclusão","Conclusão",[],{title:15,subtitle:16,publishedAt:19,author:113,unique_name:17,image:18,language:23,tags:114},"Julio Martins",[21,22],"pt-br/learning-go-lang",{id:115,data:117,body:120,filePath:121,digest:122,rendered:123},{id:14,title:15,subtitle:16,unique_name:17,image:18,publishedAt:19,tags:118,language:119},[21,22],"pt-br","Para executar o golang é necessário instalar o compilador [Go](https://go.dev/dl/), para verificar a instalação rode `go version` no terminal.\n\nDepois de instalado crie a pasta que vai ficar o seu projeto, e dentro da pasta execute esse comando `go mod init nome_do_modulo` com isso vai ser criado o seu go.mod que nele vai ter informações como o nome do modulo, a versão do go e as lib utilizadas no projeto.\n\n#### Syntax\n\nA Syntax do go é bem simples, de cima para baixo vamos ter a declaração do package, os imports, as funções e por ultimo expressões e declarações como mostrado no código abaixo:\n\n```go\npackage main\nimport (\"fmt\")\n\nfunc main() {\n  fmt.Println(\"Hello World!\")\n}\n```\n\nEm go é necessário ter o package main e a função main, eles são os iniciadores de tudo.\n\n#### Output\n\nPara exibir informações no terminal, basta usar algumas das funções de print do package `fmt`, exemplo: `Print`, `Println` ou `Printf`\n\nEm go para retornar o valor no terminal formatado bastar usar algo parecido com isso:\n\n```go\nimport \"fmt\"\n\nvar name = \"Julio\"\nvar age = 24\n\nfmt.Print(\"Name: \", name) // Saida: Name: Julio\nfmt.Println(\"Name: \", name, \"Age:\", age) // Adiciona uma quebra de linha no final\nfmt.Printf(\"Name: %v Age: %v\", name, age) // Formatado\n```\n\n##### Verbos para formatação geral\n\n| Verbo | Descrição                        |\n| ----- | -------------------------------- |\n| %v    | Valor na formatação padrão       |\n| %#v   | Valor na formatação do Go-syntax |\n| %T    | Retornar o tipo do valor         |\n| %%    | Retornar o sinal de %            |\n\n#### Variáveis\n\nExistem duas formas para se declarar uma variável em go, com `var name datatype = value` ou inferindo o tipo com `name := value`.\n\n==Inferir o tipo significa que o datatype da variável vai ser definido a partir do valor==\n\nO datatype da variável pode ser `int` que são valores numéricos (123, -123, etc.), `float32` que são valores numéricos com ponto flutuante (123.02, -123.02, etc.), `string` que são cadeias de caracteres ou `bool` que é `true` ou `false`.\n\n##### Regras para nomes\n\n1. Começar com letra ou underscore somente\n2. Só pode conter alpha-numéricos (a-z, A-Z, 0-9 e \\_)\n3. Tem case-sensitive (age, Age e AGE são variáveis diferentes)\n4. Sem limite no tamanho do nome\n5. Não pode ser palavras chaves usadas pelo Go\n\n==Variáveis criadas dentro de funções só podem ser acessadas dentro da função==\n\n##### Constantes\n\nOutra forma de declarar uma variável é usar `const` para criar uma variável imutável e somente para leitura, seguem as mesmas regras do `var` mas geralmente seus nomes estão em maiúsculo, mas isso não é uma regra é somente para identificar elas.\n\n#### Operadores\n\nEm go temos os mesmo operadores que outras linguagens de programação.\n\n##### Aritméticos\n\n| Operador | Exemplo | Resultado                   |\n| -------- | ------- | --------------------------- |\n| +        | x + y   | Soma de x com y             |\n| -        | x - y   | Subtrai um valor pelo outro |\n| \\*       | x \\* y  | Multiplica os dois valores  |\n| /        | x / y   | Faz a divisão de x por y    |\n| %        | x % y   | Resto da divisão de x por y |\n| ++       | x++     | Aumenta o valor em 1        |\n| --       | x--     | Diminui o valor em 1        |\n\n##### Operadores de Atribuição\n\n| Atribuição | Descrição                | Examplo    |\n| ---------- | ------------------------ | ---------- |\n| x = y      | Atribuir                 | x = y      |\n| x += y     | Adiciona e atribui       | x = x + y  |\n| x -= y     | Subtrai e atribui        | x = x - y  |\n| x \\*= y    | Multiplica e atribui     | x = x \\* y |\n| x /= y     | Divide e atribui         | x = x / y  |\n| x %= y     | Divide e atribui o resto | x = x % y  |\n\n##### Operadores de comparação\n\n| Operator | Name             | Example | Result                            |\n| -------- | ---------------- | ------- | --------------------------------- |\n| ==       | Igual            | x == y  | Verdade se x é igual a y          |\n| !=       | Não igual        | x != y  | Verdade se x não é igual a y      |\n| <        | Menor que        | x < y   | Verdade se x é menor que y        |\n| <=       | Menor ou igual a | x <= y  | Verdade se x é menor ou igual a y |\n| >        | Maior que        | x > y   | Verdade se x é maior que y        |\n| >=       | Maior ou igual a | x >= y  | Verdade se x é maior ou igual a y |\n\n##### Operadores Lógicos\n\n| Operator | Name       | Description                                           | Example            |\n| -------- | ---------- | ----------------------------------------------------- | ------------------ |\n| &&       | Logico E   | Retorna verdade se ambos são verdadeiros              | x < y && x > z     |\n| \\|       | Logico OU  | Retorna verdade se ao menos 1 seja verdadeiro         | x < y \\| x > z     |\n| !        | Logico Não | Inverte o resultado, se for falso torna-se verdadeiro | !(x == y && x > z) |\n\n#### Condicionais\n\nEm go para se criar um condição que executara linhas de código caso seja verdade, você pode usar o `if` desta forma\n\n```go\nif (codição) {\n\t// executa se for verdade\n}\n```\n\nVocê também pode usar o `else` junto com `if` para caso queira executar linhas de código para quando a condição for falsa\n\n```go\nif (condição) {\n\t// executa se for verdade\n} else {\n\t// executa se for falsa\n}\n```\n\nCaso você adicionar outra condições, pode usar o `else if` e passado a nova condição\n\n```go\nif (condição1) {\n\t// executa se for verdade\n} else if (condição2) {\n\t// executa se for verdade\n} else {\n\t// executa se não for verdade\n}\n```\n\n##### Switch\n\nO switch é uma forma de selecionar entre múltiplas escolhas uma para ser executa, ele é parecido com o de outras linguagens, com a diferença que não precisa usar `break`.\n\n```go\nswitch expression {\ncase x:\n   // codigo\ncase y:\n\t// codigo\ncase z:\n...\ndefault:\n\t// codigo\n}\n```\n\nEle tem uma funcionalidade chamada multi-case, que permite usar o mesmo `case` para múltiplas expressões dessa forma:\n\n```go\nswitch expression {\ncase x,y:\n   // codigo\ncase v,w:\n\t// codigo\ncase z:\n...\ndefault:\n\t// codigo\n}\n```\n\n#### Loops\n\nEm go a somente uma forma de fazer um loop e é com `for` desta forma:\n\n```go\nfor inicialização; validação; incrementação {\n\t// código\n}\n```\n\nÉ possível pular uma ou mais etapas do `for` usando `continue` e para parar o loop pode usar `break`.\n\nPara percorrer um array ou slice pode usar `range` desta forma:\n\n```go\nfor index, value := range array|slice|map {\n\t// codigo\n}\n```\n\nEla retorna o index e o valor.\n\n#### Funções\n\nEm go as funções são declaradas com `func` da seguinte forma:\n\n```go\nfunc functionName(param1 datatype, param2 datatype, ...) datatype {\n\t// codigo\n}\n\nfunctionName() // chamada\n```\n\nExistem algumas regras para o nome da função:\n\n1. O nome da função tem que iniciar com uma letra\n2. Somente alpha-numéricos (a-z, A-Z, 0-9 e \\_)\n3. O nome tem case-sensitive\n4. Não pode conter espaços\n5. Não pode ser uma palavra reservada\n\nEm go é possível nomear oque vai ser retornado pela função e também é possível retornar mais de uma coisa, basta separa por virgula no `return`\n\n```go\nfunc functionName() (result1 datatype, ...) {\n\t// codigo\n\treturn result1, result2\n}\n```\n\nSe você quiser selecionar todos os parâmetros de uma função é possível usando `...`\n\n```go\nfunc example(s ...string) {\n\tfmt.Println(s[0])\n\tfmt.Println(s[3])\n}\n\n\nexample(\"banana\", \"apple\", \"pineapple\")\n```\n\nPara aceitar qualquer tipo de parâmetro, basta passar interface{} nos parâmetros\n\n```go\nfunc example(s ...interface{}) {\n\tfmt.Println(s[0])\n\tfmt.Println(s[3])\n}\n\n\nexample(\"banana\", true, 12)\n```\n\n##### Closure Functions\n\nClosure Functions são funções anonimas, elas permitem que você acesse variáveis que foram criados fora do corpo dela.\n\n```go\nfunc main() {\n\tl := 20\n\tb := 30\n\n\tfunc() {\n\t\tvar area int\n\t\tarea = l * b\n\t\tfmt.Println(area)\n\t}()\n}\n```\n\nTambém é possível usar em loops\n\n```go\nfunc main() {\n\tfor i := 10.0; i < 100; i += 10.0 {\n\t\trad := func() float64 {\n\t\t\treturn i * 39.370\n\t\t}()\n\n\t\tfmt.Printf(\"%.2f Metros de %.2f Pelagadas\\n\", i, rad)\n\t}\n}\n```\n\n##### Defer\n\nGo tem uma declaração especial chamada defer que agenda uma chamada de função para ser executada após a conclusão da função.\n\n```go\nfunc first() {\n\tfmt.Println(\"first\")\n}\n\nfunc second() {\n\tfmt.Println(\"second\")\n}\n\nfunc main() {\n\tdefer second()\n\tfirst()\n}\n```\n\nNesse caso a função `first` vai ser executada e depois a função `second`.\n\n##### Panic e Recover\n\nEm go tem uma função chamada `panic` que tem como objetivo interromper a execução e retornar um erro.\n\n```go\nfunc main() {\n\tconfigData, err := os.ReadFile(\"config.json\")\n\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Error reading configuration file: %v\", err))\n\t}\n\t...\n}\n```\n\nCaso `err` seja diferente de `nil` a execução do programa sera interrompida e uma mensagem sera exibida no terminal.\n\nMas caso você queira fazer alguma ação antes do programa ser interrompido, você pode usar a função `recover` junto com `defer` para fazer uma ultima ação.\n\n```go\nfunc main() {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\t// Tentar restabelecer o fluxo de execução da função\n\t\t}\n\t}\n\t...\n}\n```\n\nDesta forma quando um `panic` for chamado, e as funções de defer forem chamadas você pode tentar restabelecer o programa ou encerrar tudo para evitar um crash.\n\n#### Arrays\n\nEm go os arrays são agrupamentos de valores do mesmo tipo em uma unica variável, para criar um usasse `var array_name = [length]datatype{values}`.\n\nOs arrays tem tamanho fixo, se for criado um com 5 espaços não sera possível adicionar mais que 5 valores nele.\n\nTambém é possível criar arrays com somente alguns espaços preenchidos, com `array_name = [5]int{1:2, 3:4}` desta forma teremos a seguinte saída `[0 2 0 4 0]`\n\nCase seja necessário alterar um valor, você pode usar `array_name[1] = 1` desta forma o valor que esta no index 1 vai ser igual a 1 a partir de agora.\n\n#### Slices\n\nDiferente dos arrays os slices são mais flexíveis e poderosos, permitindo que você adicione mais valores depois de criados, para se criar um slice usasse a mesma syntax do array, mas não é necessário passar o tamanho `var slice_name = []datatype{values}` você também pode criar um slice usando os valores de um array com `var slice_name := array_name[start:end]` outra possibilidade é criar eles usando a função `make` desta forma `slice_name := make([]datatype, length, capacity)`\n\nPara modificar um valor basta informar o index e o valor assim `slice_name[1] = 1`.\n\nPara adicionar no final use `slice_name = append(slice_name, elem1, elem2, ...)`, também pode ser usado para juntar duas slices com `slice3 = append(slice1, slice2...)` e necessário colocar os três pontos depois da segunda slice.\n\n#### Maps\n\nPara salvar pares de chave e valor, você pode usar o `map` das seguintes forma:\n\n```go\nvar map_name = map[keyDataType]ValueDataType{key1: value1, key2: value2, ...}\n// ou\nvar map_name = make(map[keyDataType]ValueDataType)\n```\n\nDiferente de um `struct` o `map` permite usar diferentes tipos para a chave com booleanos, números, caracteres, arrays, pointers, structs ou interfaces, somente slices, maps e funções não são permitidos. Para valores é permitido qualquer tipo.\n\nPara acessar um valor basta acessar usando a chave `map_name[key]`, a mesma forma é usada para atualizar o valor, basta atribuir o novo valor.\n\nPara deletar uma valor é necessário usar a função `delete(map_name, key)`.\n\nÉ possível também verificar se um elemento existem usando `val, ok := map_name[key]` o `ok` vai retornar um boolean.\n\nSe for copiar um `map` saiba que ele vai ter referência, então se você criar uma variável `mapY` que recebe `mapX` como valor, todos as alterações em `mapY` vão refletir em `mapX`.\n\nExemplo:\n\n```go\nvar mapX := map[string]String{\"brand\": \"Ford\", \"model\": \"Mustang\"}\nvar mapY := mapX\n\nfmt.Println(mapX) // saida: map[brand:Ford model:Mustang]\nfmt.Println(mapY) // saida: map[brand:Ford model:Mustang]\n\nb[\"model\"] = \"Maverick\"\n\nfmt.Println(a) // saida: map[brand:Ford model:Maverick]\nfmt.Println(b) // saida: map[brand:Ford model:Maverick]\n```\n\nAlém disso, é possível percorrer um `map` com um `for` basta usar `range` e ele vai retornar a chave e o valor.\n\n```go\n\nvar mapX := map[string]String{\"brand\": \"Ford\", \"model\": \"Mustang\"}\n\nfor k,v := range mapX {\n\tfmt.Println(k, v)\n}\n```\n\n#### Struct\n\nEm go existe uma forma de criar uma coleção de membros de diferentes tipos em uma variável.\n\n```go\ntype struct_name struct {\n\tmembem1 datatype;\n\tmember2 datatype;\n\t...\n}\n```\n\nPara atribuir uma struct a uma variável basta usar:\n\n```go\ntype User struct {\n\tname string;\n\tage int;\n}\n\nvar user = User{\"Julio\", 24}\n\n// ou\n\nvar user User\n\nuser.name = \"Julio\"\nuser.age = 24\n```\n\n#### Interfaces\n\nEm go as interfaces são um tipo abstrato, servem para descrever os métodos de um conjunto de métodos.\n\nPor exemplo, vamos considerar que temos uma `struct` User com as seguintes propriedades: `FirstName`, `LastName`, `Age`, `Role` e vamos criar uma interface `UserMethods` para especificar os métodos que a estrutura `User` vai ter e vamos criar um função `handleAdminUser` que vai receber a estrutura `User` como parâmetro.\n\n```go\ntype User struct {\n\tFirstName string\n\tLastName  string\n\tAge       int\n\tRole      string\n}\n\nfunc (u User) GetFullName() string {\n\treturn fmt.Sprintf(\"%v %v\", u.FirstName, u.LastName)\n}\n\nfunc (u User) GetRole() string {\n\treturn u.Role\n}\n\ntype UserMethods interface {\n\tGetFullName() string\n\tGetRole() string\n}\n\nfunc handleAdminUser(u UserMethods) {\n\tif u.GetRole() == \"admin\" {\n\t\t// Codigo\n\t}\n\n\t// Codigo\n}\n\nfunc main() {\n\tvar user User = User{\"Julio\", \"Martins\", 24, \"admin\"}\n\n\thandleAdminUser(user)\n}\n\n```\n\nDesta forma se você tentar passar um valor para `handleAdminUser` que não contenha os métodos que estão presentes em `UserMethods` será disparado um erro.\n\n#### Goroutines\n\nUma goroutine é uma thread leve de execução. As goroutines permitem a execução de funções simultaneamente em um programa e são projetadas para serem eficientes e escaláveis.\n\nGoroutines podem ser criadas usando a palavra-chave `go` seguida pela chamada da função.\n\n```go\nfunc fetch(url string) {\n\tresponse, err := http.Get(url)\n\tfmt.Println(\"GET \", url)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tdefer response.Body.Close()\n\n\tbody, err := io.ReadAll(response.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(len(body))\n}\n\nfunc main() {\n\tgo fetch(\"https://www.google.com\")\n\tgo fetch(\"https://www.stackoverflow.com\")\n\n\ttime.Sleep(10 * time.Second)\n}\n```\n\nCaso você queira esperar até que os goroutines terminem para que o programa finalize, você pode usar o `WaitGroup` do package `sync` e nele existem 3 métodos, um para adicionar `Add` um para concluir a espera de 1 goroutine `Done` e outro para esperar os goroutines `Wait`,\n\n```go\nvar wg sync.WaitGroup\n\nfunc fetch(url string) {\n\tdefer wg.Done()\n\n\tresponse, err := http.Get(url)\n\tfmt.Println(\"GET \", url)\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tdefer response.Body.Close()\n\n\tbody, err := io.ReadAll(response.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(len(body))\n}\n\nfunc main() {\n\twg.Add(2)\n\tgo fetch(\"https://www.google.com\")\n\tgo fetch(\"https://www.stackoverflow.com\")\n\n\twg.Wait()\n}\n```\n\n#### Channels\n\nOs canais são um tipo de dado utilizado para se comunicar e sincronizar entre goroutines. Para criar um channel é necessário usar a função `make` e eles podem ser com buffer e sem buffer.\n\nCanais sem buffer bloqueiam a goroutine de envio até que haja um receptor correspondente pronto para receber o valor que está sendo enviado.\n\nCanais com buffer, por outro lado, podem conter um número limitado de valores (determinado pelo tamanho do buffer) e só bloquearão a goroutine de envio quando o buffer estiver cheio.\n\nPara criar um canal sem buffer utiliza-se o seguinte comando:\n\n```go\nch := make(chan datatype)\n\nch <- value // Enviar um valor para o canal\nx := <- ch // Receber um valor do canal e atribuir a x\n```\n\nPara criar um canal com buffer basta passar um segundo valor para a função `make` esse segundo parâmetro é a capacidade que esse canal pode ter.\n\n```go\nch := make(chan datatype, 3)\n\nch <- 1\nch <- 2\nch <- 3\n```\n\nCom esses envios o canal agora esta cheio, para adicionar mais items sera necessário receber os valores com `:= <- ch`.\n\nOutra coisa importante é o fechamento do canal com a função `close` passando o canal como parâmetro, isso é necessário para evitar que a goroutine principal bloqueie indefinidamente no canal, mas é necessário fechar corretamente para evitar erros e para isso é necessário seguir algumas regras:\n\n1. Somente o transmissor deveria fechar o canal\n2. É possível usar o range loop para receber valores, porque o loop vai terminar automaticamente quando o canal fechar.\n3. Verifique se o canal esta aberto antes de enviar um valor com `x, ok := <-ch` a variável `ok` vai dizer se o canal esta aberto.\n4. Usar `select` para receber valores de múltiplos canais.\n\nExemplo de uso de `select` e `for` em canais:\n\n```go\nfor {\n\tselect {\n\t\tcase n := channel1:\n\t\t\t// Exemplo para caso você queira usar o valor do channel\n\t\tcase <-channel2:\n\t\t\t// Exemplo usando o channel se salvar o valor\n\t\tcase n, ok := channel3\n\t\t\t// Exemplo para fazer condições\n\t}\n}\n```\n\nCaso tenha somente um canal, você pode usar um `for` com `range` para receber os valores\n\n```go\nfor n := range channel {\n\t// Código\n}\n```\n\nVocê pode usar um canal como parâmetro da seguinte forma\n\n```go\nfunc sendData(ch chan<- int) {\n\t// Código\n}\n```\n\n#### Conclusão\n\nAgora você já tem o essencial para fazer seus apps com golang mas ainda não terminou as coisas para se aprender sobre golang, existe algumas libs padrão da linguagem, como por exemplo `log` para logging, `os` que é uma lib para lidar com o sistema operacional, com ela é possível criar/ler/mover/copiar/deletar arquivos/diretórios entre outras libs que existem.","src/data/blog/pt-br/learning-go-lang.md","02bed20316da1de4",{html:124,metadata:125},"<p>Para executar o golang é necessário instalar o compilador <a href=\"https://go.dev/dl/\">Go</a>, para verificar a instalação rode <code>go version</code> no terminal.</p>\n<p>Depois de instalado crie a pasta que vai ficar o seu projeto, e dentro da pasta execute esse comando <code>go mod init nome_do_modulo</code> com isso vai ser criado o seu go.mod que nele vai ter informações como o nome do modulo, a versão do go e as lib utilizadas no projeto.</p>\n<h4 id=\"syntax\">Syntax</h4>\n<p>A Syntax do go é bem simples, de cima para baixo vamos ter a declaração do package, os imports, as funções e por ultimo expressões e declarações como mostrado no código abaixo:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">package</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">import</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"fmt\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">  fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Hello World!\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Em go é necessário ter o package main e a função main, eles são os iniciadores de tudo.</p>\n<h4 id=\"output\">Output</h4>\n<p>Para exibir informações no terminal, basta usar algumas das funções de print do package <code>fmt</code>, exemplo: <code>Print</code>, <code>Println</code> ou <code>Printf</code></p>\n<p>Em go para retornar o valor no terminal formatado bastar usar algo parecido com isso:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">import</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"fmt\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> name </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"Julio\"</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> age </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 24</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Print</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Name: \"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, name) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Saida: Name: Julio</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Name: \"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, name, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Age:\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, age) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Adiciona uma quebra de linha no final</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Printf</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Name: </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%v</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> Age: </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%v</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, name, age) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Formatado</span></span></code></pre>\n<h5 id=\"verbos-para-formatação-geral\">Verbos para formatação geral</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Verbo</th><th>Descrição</th></tr></thead><tbody><tr><td>%v</td><td>Valor na formatação padrão</td></tr><tr><td>%#v</td><td>Valor na formatação do Go-syntax</td></tr><tr><td>%T</td><td>Retornar o tipo do valor</td></tr><tr><td>%%</td><td>Retornar o sinal de %</td></tr></tbody></table>\n<h4 id=\"variáveis\">Variáveis</h4>\n<p>Existem duas formas para se declarar uma variável em go, com <code>var name datatype = value</code> ou inferindo o tipo com <code>name := value</code>.</p>\n<p><mark class=\"flexible-marker flexible-marker-default\">Inferir o tipo significa que o datatype da variável vai ser definido a partir do valor</mark></p>\n<p>O datatype da variável pode ser <code>int</code> que são valores numéricos (123, -123, etc.), <code>float32</code> que são valores numéricos com ponto flutuante (123.02, -123.02, etc.), <code>string</code> que são cadeias de caracteres ou <code>bool</code> que é <code>true</code> ou <code>false</code>.</p>\n<h5 id=\"regras-para-nomes\">Regras para nomes</h5>\n<ol>\n<li>Começar com letra ou underscore somente</li>\n<li>Só pode conter alpha-numéricos (a-z, A-Z, 0-9 e _)</li>\n<li>Tem case-sensitive (age, Age e AGE são variáveis diferentes)</li>\n<li>Sem limite no tamanho do nome</li>\n<li>Não pode ser palavras chaves usadas pelo Go</li>\n</ol>\n<p><mark class=\"flexible-marker flexible-marker-default\">Variáveis criadas dentro de funções só podem ser acessadas dentro da função</mark></p>\n<h5 id=\"constantes\">Constantes</h5>\n<p>Outra forma de declarar uma variável é usar <code>const</code> para criar uma variável imutável e somente para leitura, seguem as mesmas regras do <code>var</code> mas geralmente seus nomes estão em maiúsculo, mas isso não é uma regra é somente para identificar elas.</p>\n<h4 id=\"operadores\">Operadores</h4>\n<p>Em go temos os mesmo operadores que outras linguagens de programação.</p>\n<h5 id=\"aritméticos\">Aritméticos</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operador</th><th>Exemplo</th><th>Resultado</th></tr></thead><tbody><tr><td>+</td><td>x + y</td><td>Soma de x com y</td></tr><tr><td>-</td><td>x - y</td><td>Subtrai um valor pelo outro</td></tr><tr><td>*</td><td>x * y</td><td>Multiplica os dois valores</td></tr><tr><td>/</td><td>x / y</td><td>Faz a divisão de x por y</td></tr><tr><td>%</td><td>x % y</td><td>Resto da divisão de x por y</td></tr><tr><td>++</td><td>x++</td><td>Aumenta o valor em 1</td></tr><tr><td>—</td><td>x—</td><td>Diminui o valor em 1</td></tr></tbody></table>\n<h5 id=\"operadores-de-atribuição\">Operadores de Atribuição</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Atribuição</th><th>Descrição</th><th>Examplo</th></tr></thead><tbody><tr><td>x = y</td><td>Atribuir</td><td>x = y</td></tr><tr><td>x += y</td><td>Adiciona e atribui</td><td>x = x + y</td></tr><tr><td>x -= y</td><td>Subtrai e atribui</td><td>x = x - y</td></tr><tr><td>x *= y</td><td>Multiplica e atribui</td><td>x = x * y</td></tr><tr><td>x /= y</td><td>Divide e atribui</td><td>x = x / y</td></tr><tr><td>x %= y</td><td>Divide e atribui o resto</td><td>x = x % y</td></tr></tbody></table>\n<h5 id=\"operadores-de-comparação\">Operadores de comparação</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Name</th><th>Example</th><th>Result</th></tr></thead><tbody><tr><td>==</td><td>Igual</td><td>x == y</td><td>Verdade se x é igual a y</td></tr><tr><td>!=</td><td>Não igual</td><td>x != y</td><td>Verdade se x não é igual a y</td></tr><tr><td>&#x3C;</td><td>Menor que</td><td>x &#x3C; y</td><td>Verdade se x é menor que y</td></tr><tr><td>&#x3C;=</td><td>Menor ou igual a</td><td>x &#x3C;= y</td><td>Verdade se x é menor ou igual a y</td></tr><tr><td>></td><td>Maior que</td><td>x > y</td><td>Verdade se x é maior que y</td></tr><tr><td>>=</td><td>Maior ou igual a</td><td>x >= y</td><td>Verdade se x é maior ou igual a y</td></tr></tbody></table>\n<h5 id=\"operadores-lógicos\">Operadores Lógicos</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Name</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>&#x26;&#x26;</td><td>Logico E</td><td>Retorna verdade se ambos são verdadeiros</td><td>x &#x3C; y &#x26;&#x26; x > z</td></tr><tr><td>|</td><td>Logico OU</td><td>Retorna verdade se ao menos 1 seja verdadeiro</td><td>x &#x3C; y | x > z</td></tr><tr><td>!</td><td>Logico Não</td><td>Inverte o resultado, se for falso torna-se verdadeiro</td><td>!(x == y &#x26;&#x26; x > z)</td></tr></tbody></table>\n<h4 id=\"condicionais\">Condicionais</h4>\n<p>Em go para se criar um condição que executara linhas de código caso seja verdade, você pode usar o <code>if</code> desta forma</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (codição) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Você também pode usar o <code>else</code> junto com <code>if</code> para caso queira executar linhas de código para quando a condição for falsa</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (condição) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">} </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">else</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for falsa</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Caso você adicionar outra condições, pode usar o <code>else if</code> e passado a nova condição</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (condição1) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">} </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">else</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> if</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (condição2) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">} </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">else</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// executa se não for verdade</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h5 id=\"switch\">Switch</h5>\n<p>O switch é uma forma de selecionar entre múltiplas escolhas uma para ser executa, ele é parecido com o de outras linguagens, com a diferença que não precisa usar <code>break</code>.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">switch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> expression {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> x:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">   // codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> y:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> z:</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">default</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Ele tem uma funcionalidade chamada multi-case, que permite usar o mesmo <code>case</code> para múltiplas expressões dessa forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">switch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> expression {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> x,y:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">   // codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> v,w:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">case</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> z:</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">default</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h4 id=\"loops\">Loops</h4>\n<p>Em go a somente uma forma de fazer um loop e é com <code>for</code> desta forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> inicialização; validação; incrementação {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// código</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>É possível pular uma ou mais etapas do <code>for</code> usando <code>continue</code> e para parar o loop pode usar <code>break</code>.</p>\n<p>Para percorrer um array ou slice pode usar <code>range</code> desta forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> index, value </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> range</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> array</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">|</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">slice</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">|map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Ela retorna o index e o valor.</p>\n<h4 id=\"funções\">Funções</h4>\n<p>Em go as funções são declaradas com <code>func</code> da seguinte forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> functionName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(param1 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, param2 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">functionName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// chamada</span></span></code></pre>\n<p>Existem algumas regras para o nome da função:</p>\n<ol>\n<li>O nome da função tem que iniciar com uma letra</li>\n<li>Somente alpha-numéricos (a-z, A-Z, 0-9 e _)</li>\n<li>O nome tem case-sensitive</li>\n<li>Não pode conter espaços</li>\n<li>Não pode ser uma palavra reservada</li>\n</ol>\n<p>Em go é possível nomear oque vai ser retornado pela função e também é possível retornar mais de uma coisa, basta separa por virgula no <code>return</code></p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> functionName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() (result1 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// codigo</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> result1, result2</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Se você quiser selecionar todos os parâmetros de uma função é possível usando <code>...</code></p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> example</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s[</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s[</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">3</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">example</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"banana\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"apple\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"pineapple\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span></code></pre>\n<p>Para aceitar qualquer tipo de parâmetro, basta passar interface{} nos parâmetros</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> example</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...interface</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{}) {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s[</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(s[</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">3</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">example</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"banana\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\">true</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">12</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span></code></pre>\n<h5 id=\"closure-functions\">Closure Functions</h5>\n<p>Closure Functions são funções anonimas, elas permitem que você acesse variáveis que foram criados fora do corpo dela.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tl </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 20</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tb </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 30</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tfunc</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tvar</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> area </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tarea </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> l </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">*</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> b</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(area)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}()</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Também é possível usar em loops</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tfor</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> i </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 10.0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">; i </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 100</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">; i </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">+=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 10.0</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\trad </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> func</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">float64</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\t\treturn</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> i </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">*</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 39.370</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\t}()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Printf</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%.2f</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> Metros de </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%.2f</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> Pelagadas\\n\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, i, rad)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h5 id=\"defer\">Defer</h5>\n<p>Go tem uma declaração especial chamada defer que agenda uma chamada de função para ser executada após a conclusão da função.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> first</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"first\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> second</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"second\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> second</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tfirst</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Nesse caso a função <code>first</code> vai ser executada e depois a função <code>second</code>.</p>\n<h5 id=\"panic-e-recover\">Panic e Recover</h5>\n<p>Em go tem uma função chamada <code>panic</code> que tem como objetivo interromper a execução e retornar um erro.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tconfigData, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ReadFile</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"config.json\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\t\tpanic</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Sprintf</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Error reading configuration file: </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%v</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, err))</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t...</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Caso <code>err</code> seja diferente de <code>nil</code> a execução do programa sera interrompida e uma mensagem sera exibida no terminal.</p>\n<p>Mas caso você queira fazer alguma ação antes do programa ser interrompido, você pode usar a função <code>recover</code> junto com <code>defer</code> para fazer uma ultima ação.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> func</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> r </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> recover</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(); r </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t\t// Tentar restabelecer o fluxo de execução da função</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t...</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Desta forma quando um <code>panic</code> for chamado, e as funções de defer forem chamadas você pode tentar restabelecer o programa ou encerrar tudo para evitar um crash.</p>\n<h4 id=\"arrays\">Arrays</h4>\n<p>Em go os arrays são agrupamentos de valores do mesmo tipo em uma unica variável, para criar um usasse <code>var array_name = [length]datatype{values}</code>.</p>\n<p>Os arrays tem tamanho fixo, se for criado um com 5 espaços não sera possível adicionar mais que 5 valores nele.</p>\n<p>Também é possível criar arrays com somente alguns espaços preenchidos, com <code>array_name = [5]int{1:2, 3:4}</code> desta forma teremos a seguinte saída <code>[0 2 0 4 0]</code></p>\n<p>Case seja necessário alterar um valor, você pode usar <code>array_name[1] = 1</code> desta forma o valor que esta no index 1 vai ser igual a 1 a partir de agora.</p>\n<h4 id=\"slices\">Slices</h4>\n<p>Diferente dos arrays os slices são mais flexíveis e poderosos, permitindo que você adicione mais valores depois de criados, para se criar um slice usasse a mesma syntax do array, mas não é necessário passar o tamanho <code>var slice_name = []datatype{values}</code> você também pode criar um slice usando os valores de um array com <code>var slice_name := array_name[start:end]</code> outra possibilidade é criar eles usando a função <code>make</code> desta forma <code>slice_name := make([]datatype, length, capacity)</code></p>\n<p>Para modificar um valor basta informar o index e o valor assim <code>slice_name[1] = 1</code>.</p>\n<p>Para adicionar no final use <code>slice_name = append(slice_name, elem1, elem2, ...)</code>, também pode ser usado para juntar duas slices com <code>slice3 = append(slice1, slice2...)</code> e necessário colocar os três pontos depois da segunda slice.</p>\n<h4 id=\"maps\">Maps</h4>\n<p>Para salvar pares de chave e valor, você pode usar o <code>map</code> das seguintes forma:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> map_name </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">keyDataType</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ValueDataType</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{key1: value1, key2: value2, </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">...</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// ou</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> map_name </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">keyDataType</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ValueDataType</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span></code></pre>\n<p>Diferente de um <code>struct</code> o <code>map</code> permite usar diferentes tipos para a chave com booleanos, números, caracteres, arrays, pointers, structs ou interfaces, somente slices, maps e funções não são permitidos. Para valores é permitido qualquer tipo.</p>\n<p>Para acessar um valor basta acessar usando a chave <code>map_name[key]</code>, a mesma forma é usada para atualizar o valor, basta atribuir o novo valor.</p>\n<p>Para deletar uma valor é necessário usar a função <code>delete(map_name, key)</code>.</p>\n<p>É possível também verificar se um elemento existem usando <code>val, ok := map_name[key]</code> o <code>ok</code> vai retornar um boolean.</p>\n<p>Se for copiar um <code>map</code> saiba que ele vai ter referência, então se você criar uma variável <code>mapY</code> que recebe <code>mapX</code> como valor, todos as alterações em <code>mapY</code> vão refletir em <code>mapX</code>.</p>\n<p>Exemplo:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapX </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">String</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"brand\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">: </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Ford\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"model\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">: </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Mustang\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapY </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapX</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(mapX) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// saida: map[brand:Ford model:Mustang]</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(mapY) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// saida: map[brand:Ford model:Mustang]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">b[</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"model\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">] </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"Maverick\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(a) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// saida: map[brand:Ford model:Maverick]</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(b) </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// saida: map[brand:Ford model:Maverick]</span></span></code></pre>\n<p>Além disso, é possível percorrer um <code>map</code> com um <code>for</code> basta usar <code>range</code> e ele vai retornar a chave e o valor.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapX </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> map</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">[</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">]</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">String</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"brand\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">: </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Ford\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"model\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">: </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Mustang\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> k,v </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> range</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> mapX {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(k, v)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h4 id=\"struct\">Struct</h4>\n<p>Em go existe uma forma de criar uma coleção de membros de diferentes tipos em uma variável.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">type</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> struct_name</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> struct</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tmembem1 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tmember2 </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t...</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Para atribuir uma struct a uma variável basta usar:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">type</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> User</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> struct</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tname </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tage </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">int</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> user </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> User</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Julio\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">24</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// ou</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> user </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">User</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">user.name </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"Julio\"</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">user.age </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">=</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 24</span></span></code></pre>\n<h4 id=\"interfaces\">Interfaces</h4>\n<p>Em go as interfaces são um tipo abstrato, servem para descrever os métodos de um conjunto de métodos.</p>\n<p>Por exemplo, vamos considerar que temos uma <code>struct</code> User com as seguintes propriedades: <code>FirstName</code>, <code>LastName</code>, <code>Age</code>, <code>Role</code> e vamos criar uma interface <code>UserMethods</code> para especificar os métodos que a estrutura <code>User</code> vai ter e vamos criar um função <code>handleAdminUser</code> que vai receber a estrutura <code>User</code> como parâmetro.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">type</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> User</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> struct</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tFirstName </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tLastName  </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tAge       </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tRole      </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (u </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">User</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">GetFullName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Sprintf</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">%v</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> %v</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, u.FirstName, u.LastName)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> (u </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">User</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">GetRole</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\treturn</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> u.Role</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">type</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> UserMethods</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> interface</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tGetFullName</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\tGetRole</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> handleAdminUser</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(u </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">UserMethods</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> u.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">GetRole</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">==</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\"> \"admin\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t// Codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// Codigo</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tvar</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> user </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">User</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> User</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">{</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Julio\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"Martins\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">24</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"admin\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">\thandleAdminUser</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(user)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Desta forma se você tentar passar um valor para <code>handleAdminUser</code> que não contenha os métodos que estão presentes em <code>UserMethods</code> será disparado um erro.</p>\n<h4 id=\"goroutines\">Goroutines</h4>\n<p>Uma goroutine é uma thread leve de execução. As goroutines permitem a execução de funções simultaneamente em um programa e são projetadas para serem eficientes e escaláveis.</p>\n<p>Goroutines podem ser criadas usando a palavra-chave <code>go</code> seguida pela chamada da função.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(url </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tresponse, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> http.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Get</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(url)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"GET \"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, url)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Fatal</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> response.Body.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Close</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tbody, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> io.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ReadAll</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(response.Body)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Fatal</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">len</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(body))</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tgo</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"https://www.google.com\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tgo</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"https://www.stackoverflow.com\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\ttime.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Sleep</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">10</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> *</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Caso você queira esperar até que os goroutines terminem para que o programa finalize, você pode usar o <code>WaitGroup</code> do package <code>sync</code> e nele existem 3 métodos, um para adicionar <code>Add</code> um para concluir a espera de 1 goroutine <code>Done</code> e outro para esperar os goroutines <code>Wait</code>,</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">var</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> wg </span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">sync</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">WaitGroup</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(url </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">string</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> wg.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Done</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tresponse, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> http.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Get</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(url)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"GET \"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, url)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Fatal</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tdefer</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> response.Body.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Close</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tbody, err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> io.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">ReadAll</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(response.Body)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tif</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> err </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">!=</span><span style=\"color:#1976D2;--shiki-dark:#79B8FF\"> nil</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t\tlog.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Fatal</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\tfmt.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Println</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">len</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(body))</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> main</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\twg.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Add</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">2</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tgo</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"https://www.google.com\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tgo</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> fetch</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#22863A;--shiki-dark:#FFAB70\">\"https://www.stackoverflow.com\"</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\twg.</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\">Wait</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h4 id=\"channels\">Channels</h4>\n<p>Os canais são um tipo de dado utilizado para se comunicar e sincronizar entre goroutines. Para criar um channel é necessário usar a função <code>make</code> e eles podem ser com buffer e sem buffer.</p>\n<p>Canais sem buffer bloqueiam a goroutine de envio até que haja um receptor correspondente pronto para receber o valor que está sendo enviado.</p>\n<p>Canais com buffer, por outro lado, podem conter um número limitado de valores (determinado pelo tamanho do buffer) e só bloquearão a goroutine de envio quando o buffer estiver cheio.</p>\n<p>Para criar um canal sem buffer utiliza-se o seguinte comando:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;-</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> value </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Enviar um valor para o canal</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">x </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> &#x3C;-</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> ch </span><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">// Receber um valor do canal e atribuir a x</span></span></code></pre>\n<p>Para criar um canal com buffer basta passar um segundo valor para a função <code>make</code> esse segundo parâmetro é a capacidade que esse canal pode ter.</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> make</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> datatype</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">, </span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\">3</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;-</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;-</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">&#x3C;-</span><span style=\"color:#1976D2;--shiki-dark:#F8F8F8\"> 3</span></span></code></pre>\n<p>Com esses envios o canal agora esta cheio, para adicionar mais items sera necessário receber os valores com <code>:= &#x3C;- ch</code>.</p>\n<p>Outra coisa importante é o fechamento do canal com a função <code>close</code> passando o canal como parâmetro, isso é necessário para evitar que a goroutine principal bloqueie indefinidamente no canal, mas é necessário fechar corretamente para evitar erros e para isso é necessário seguir algumas regras:</p>\n<ol>\n<li>Somente o transmissor deveria fechar o canal</li>\n<li>É possível usar o range loop para receber valores, porque o loop vai terminar automaticamente quando o canal fechar.</li>\n<li>Verifique se o canal esta aberto antes de enviar um valor com <code>x, ok := &#x3C;-ch</code> a variável <code>ok</code> vai dizer se o canal esta aberto.</li>\n<li>Usar <code>select</code> para receber valores de múltiplos canais.</li>\n</ol>\n<p>Exemplo de uso de <code>select</code> e <code>for</code> em canais:</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\tselect</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tcase</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> n </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> channel1:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t\t// Exemplo para caso você queira usar o valor do channel</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tcase</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> &#x3C;-</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">channel2:</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t\t// Exemplo usando o channel se salvar o valor</span></span>\n<span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">\t\tcase</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> n, ok </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> channel3</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t\t\t// Exemplo para fazer condições</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">\t}</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Caso tenha somente um canal, você pode usar um <code>for</code> com <code>range</code> para receber os valores</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">for</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> n </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">:=</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> range</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\"> channel {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// Código</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<p>Você pode usar um canal como parâmetro da seguinte forma</p>\n<pre class=\"astro-code astro-code-themes min-light min-dark\" style=\"background-color:#ffffff;--shiki-dark-bg:#1f1f1f;color:#24292eff;--shiki-dark:#b392f0; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#D32F2F;--shiki-dark:#F97583\">func</span><span style=\"color:#6F42C1;--shiki-dark:#B392F0\"> sendData</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">(ch </span><span style=\"color:#D32F2F;--shiki-dark:#F97583\">chan&#x3C;-</span><span style=\"color:#D32F2F;--shiki-dark:#F97583\"> int</span><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">) {</span></span>\n<span class=\"line\"><span style=\"color:#C2C3C5;--shiki-dark:#6B737C\">\t// Código</span></span>\n<span class=\"line\"><span style=\"color:#24292EFF;--shiki-dark:#B392F0\">}</span></span></code></pre>\n<h4 id=\"conclusão\">Conclusão</h4>\n<p>Agora você já tem o essencial para fazer seus apps com golang mas ainda não terminou as coisas para se aprender sobre golang, existe algumas libs padrão da linguagem, como por exemplo <code>log</code> para logging, <code>os</code> que é uma lib para lidar com o sistema operacional, com ela é possível criar/ler/mover/copiar/deletar arquivos/diretórios entre outras libs que existem.</p>",{headings:126,imagePaths:156,frontmatter:157},[127,128,129,131,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155],{depth:39,slug:33,text:34},{depth:39,slug:36,text:37},{depth:130,slug:40,text:41},5,{depth:39,slug:132,text:133},"variáveis","Variáveis",{depth:130,slug:46,text:47},{depth:130,slug:49,text:50},{depth:39,slug:52,text:53},{depth:130,slug:55,text:56},{depth:130,slug:58,text:59},{depth:130,slug:61,text:62},{depth:130,slug:64,text:65},{depth:39,slug:67,text:68},{depth:130,slug:70,text:71},{depth:39,slug:73,text:74},{depth:39,slug:76,text:77},{depth:130,slug:79,text:80},{depth:130,slug:82,text:83},{depth:130,slug:85,text:86},{depth:39,slug:88,text:89},{depth:39,slug:91,text:92},{depth:39,slug:94,text:95},{depth:39,slug:97,text:98},{depth:39,slug:100,text:101},{depth:39,slug:103,text:104},{depth:39,slug:106,text:107},{depth:39,slug:109,text:110},[],{title:15,subtitle:16,publishedAt:19,author:113,unique_name:17,image:18,language:119,tags:158},[21,22]];

export { _astro_dataLayerContent as default };
